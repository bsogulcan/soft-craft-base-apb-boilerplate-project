import {AppComponentBase} from '../../../shared/app-component-base';
import {Component, Inject, Injector, Input, OnInit, Optional, Output} from '@angular/core';
import {finalize} from 'rxjs/operators';
import {API_BASE_URL} from '../../service-proxies/service-proxies';
import {DataGridOptions} from './model/dataGridOptions';
import {DialogService, DynamicDialogRef} from 'primeng-lts/dynamicdialog';
import {ConfirmationService, MessageService} from 'primeng-lts/api';
import {LocalizationService} from 'abp-ng2-module';
import * as _ from 'lodash';
import * as FileSaver from 'file-saver';

@Component({
    selector: 'app-dataGrid',
    templateUrl: './dataGrid.component.html',
    styleUrls: ['./dataGrid.component.scss'],
})
export class DataGridComponent extends AppComponentBase implements OnInit {
    @Input() dataGridOptionInput: DataGridOptions;
    @Input() crudService: any;
    dataGridOptions: DataGridOptions = new DataGridOptions();
    baseUrl: string;
    ref: DynamicDialogRef;
    _crudService: any;
    loading: boolean = false;

    constructor(injector: Injector,
                public dialogService: DialogService,
                public messageService: MessageService,
                private confirmationService: ConfirmationService,
                @Optional() @Inject(API_BASE_URL) baseUrl?: string,
    ) {
        super(injector);
        this.baseUrl = baseUrl;
    }

    ngOnInit() {
        this.dataGridOptions = this.dataGridOptionInput;
        this._crudService = this.crudService;
		//No need to fetch datas on initialize component. Each component allready fetch datas before initialize gridComponent
		//this.doRefresh();
    }

    openCreate() {
        let headerText = abp.localization.localize('Create', abp.localization.defaultSourceName) + ' ' +
            abp.localization.localize(this.dataGridOptions.entityName, abp.localization.defaultSourceName);
        this.ref = this.dialogService.open(this.dataGridOptions.createComponent, {
            header: headerText,
            footer: this.dataGridOptions.dialogConfig.footer,
            width: this.dataGridOptions.dialogConfig.width,
            height: this.dataGridOptions.dialogConfig.height,
            closeOnEscape: this.dataGridOptions.dialogConfig.closeOnEscape,
            baseZIndex: this.dataGridOptions.dialogConfig.baseZIndex,
            autoZIndex: this.dataGridOptions.dialogConfig.autoZIndex,
            dismissableMask: this.dataGridOptions.dialogConfig.dismissableMask,
            rtl: this.dataGridOptions.dialogConfig.rtl,
            style: this.dataGridOptions.dialogConfig.style,
            contentStyle: this.dataGridOptions.dialogConfig.contentStyle,
            styleClass: this.dataGridOptions.dialogConfig.styleClass,
            transitionOptions: this.dataGridOptions.dialogConfig.transitionOptions,
            closable: this.dataGridOptions.dialogConfig.closable,
            showHeader: this.dataGridOptions.dialogConfig.showHeader,
            modal: this.dataGridOptions.dialogConfig.modal
        });

        this.ref.onClose.subscribe((response: any) => {
            if (response) {
                this.crudService.get(response.id).subscribe((addedItem) => {
                    let summaryText = abp.localization.localize('AddedSuccessfully', abp.localization.defaultSourceName);
                    this.messageService.add({severity: 'success', summary: summaryText, life: 3000});
                    this.dataGridOptions.dataSource.push(addedItem.result);
                });
            }
        });
    }

    openUpdate(item: any) {
        this.loading = true;
        this.crudService.get(item.id).subscribe(
            (response) => {
                this.loading = false;

                let headerText = abp.localization.localize('Update', abp.localization.defaultSourceName) + ' ' +
                    abp.localization.localize(this.dataGridOptions.entityName, abp.localization.defaultSourceName);

                this.ref = this.dialogService.open(this.dataGridOptions.editComponent, {
                    header: headerText,
                    footer: this.dataGridOptions.dialogConfig.footer,
                    width: this.dataGridOptions.dialogConfig.width,
                    height: this.dataGridOptions.dialogConfig.height,
                    closeOnEscape: this.dataGridOptions.dialogConfig.closeOnEscape,
                    baseZIndex: this.dataGridOptions.dialogConfig.baseZIndex,
                    autoZIndex: this.dataGridOptions.dialogConfig.autoZIndex,
                    dismissableMask: this.dataGridOptions.dialogConfig.dismissableMask,
                    rtl: this.dataGridOptions.dialogConfig.rtl,
                    style: this.dataGridOptions.dialogConfig.style,
                    contentStyle: {'height': this.dataGridOptions.dialogConfig.height},
                    styleClass: this.dataGridOptions.dialogConfig.styleClass,
                    transitionOptions: this.dataGridOptions.dialogConfig.transitionOptions,
                    closable: this.dataGridOptions.dialogConfig.closable,
                    showHeader: this.dataGridOptions.dialogConfig.showHeader,
                    modal: this.dataGridOptions.dialogConfig.modal,
                    data: {item: response}
                });

                this.ref.onClose.subscribe((response: any) => {
                    if (response) {
                        let summaryText = abp.localization.localize('UpdatedSuccessfully', abp.localization.defaultSourceName);
                        this.messageService.add({severity: 'success', summary: summaryText, life: 3000});
                        let index = this.dataGridOptions.dataSource.findIndex(x => x.id == response.id);
                        if (index != -1) {
                            this.dataGridOptions.dataSource.splice(index, 1, response);
                        }
                    }
                });
            }, (error) => {
                this.loading = false;
            }
        );

    }

    openDelete(id: number) {
        this.confirmationService.confirm({
            message: 'Are you sure you want to delete selected ?',
            header: 'Confirm',
            icon: 'pi pi-exclamation-triangle',
            accept: () => {
                this._crudService.delete(id).subscribe(
                    (complete) => {
                        let summaryText = abp.localization.localize('DeletedSuccessfully', abp.localization.defaultSourceName);
                        this.messageService.add({severity: 'success', summary: summaryText, life: 3000});
                        let index = this.dataGridOptions.dataSource.findIndex(x => x.id == id);
                        if (index != -1) {
                            this.dataGridOptions.dataSource.splice(index, 1);
                        }
                    }
                );
            },
        });
    }

    doRefresh() {
        this.loading = true;
        this.crudService.getList().subscribe(
            (response) => {
                this.dataGridOptions.dataSource = response.result.items;
                this.loading = false;
            },
            (error) => {
                this.dataGridOptions.dataSource = [];
                this.loading = false;
            }
        );
    }

    exportPdf() {
        import('jspdf').then(jsPDF => {
            import('jspdf-autotable').then(x => {
                // const doc = new jsPDF.default('p','pt');
                // doc.autoTable(this.dataGridOptions.exportCols, this.dataGridOptions.dataSource);
                // doc.save('products.pdf');
            });
        });
    }

    exportExcel() {
        import('xlsx').then(xlsx => {
            const worksheet = xlsx.utils.json_to_sheet(this.dataGridOptions.dataSource);
            const workbook = {Sheets: {'data': worksheet}, SheetNames: ['data']};
            const excelBuffer: any = xlsx.write(workbook, {bookType: 'xlsx', type: 'array'});
            this.saveAsExcelFile(excelBuffer, this.dataGridOptions.entityName);
        });
    }

    saveAsExcelFile(buffer: any, fileName: string): void {
        let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
        let EXCEL_EXTENSION = '.xlsx';
        const data: Blob = new Blob([buffer], {
            type: EXCEL_TYPE
        });
        FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);
    }

    fetchFromObject(obj, prop) {
        if (typeof obj === 'undefined') {
            return 'NULL';
        }
        let _index = prop.indexOf('.');
        if (_index > -1) {
            return this.fetchFromObject(obj[prop.substring(0, _index)], prop.substr(_index + 1));
        }

        if (obj[prop] && typeof (obj[prop]) == 'string' && !isNaN(Date.parse(obj[prop]))) {
            obj[prop] = new Date(obj[prop]);
            return new Date(obj[prop]);
        }

        return obj[prop];
    }
}
